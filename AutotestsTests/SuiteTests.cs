// Generated by Selenium IDE

using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;

namespace AutotestsTests;

public class SuiteTests : IDisposable
{
    private readonly WebDriverWait _wait;
    public IWebDriver Driver { get; private set; }
    public IDictionary<string, object> Vars { get; private set; }
    public IJavaScriptExecutor Js { get; private set; }

    public SuiteTests()
    {
        Driver = new ChromeDriver();
        Js = (IJavaScriptExecutor)Driver;
        Vars = new Dictionary<string, object>();
        _wait = new WebDriverWait(Driver, TimeSpan.FromSeconds(120));
        Driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
    }

    public void Dispose()
    {
        Driver.Quit();
    }

    [Fact]
    public void TestDeliveryPoints()
    {
        Driver.Navigate().GoToUrl("https://kazanexpress.ru/");
        Driver.Manage().Window.Size = new System.Drawing.Size(1288, 728);
        Driver.FindElement(By.CssSelector("#top-header > div")).Click();
        {
            var element = Driver.FindElement(By.LinkText("Пункты выдачи"));
            var builder = new Actions(Driver);
            builder.MoveToElement(element).Perform();
        }
        Driver.FindElement(By.LinkText("Пункты выдачи")).Click();
        _wait.Until(x => x.FindElement(By.CssSelector(".details:nth-child(42) > h3")));
        Driver.FindElement(By.CssSelector(".details:nth-child(42) > h3")).Click();
        _wait.Until(x => x.FindElement(By.CssSelector(".details:nth-child(42) > h3")));
        Driver.FindElement(By.CssSelector(".details:nth-child(42) > h3")).Click();
        Driver.Close();
    }
    
    [Fact]
    public void TestSearchAndAutocompleteReturnSuccess()
    {
        Driver.Navigate().GoToUrl("https://kazanexpress.ru/");
        Driver.Manage().Window.Size = new System.Drawing.Size(1289, 730);
        {
            var element = Driver.FindElement(By.CssSelector(".catalog-icon"));
            Actions builder = new Actions(Driver);
            builder.MoveToElement(element).Perform();
        }
        Driver.FindElement(By.CssSelector(".default-input")).Click();
        Driver.FindElement(By.CssSelector(".default-input")).SendKeys("солнцезащитные очки");
        var cat = Driver.FindElements(By.ClassName("category-cell"))
            .SingleOrDefault(x => x.Text.Contains("Женские солнечные очки"));
        Assert.NotNull(cat);
        cat.Click();
        var cards = Driver.FindElements(By.ClassName("ui-card"));
        Assert.NotEmpty(cards);
        Driver.Close();
    }

    [Fact]
    public void TestSearchAndAutocompleteReturnEmptyResult()
    {
        Driver.Navigate().GoToUrl("https://kazanexpress.ru/");
        Driver.Manage().Window.Size = new System.Drawing.Size(1289, 730);
        {
            var element = Driver.FindElement(By.LinkText("Обувь"));
            Actions builder = new Actions(Driver);
            builder.MoveToElement(element).Perform();
        }
        Driver.FindElement(By.CssSelector(".default-input")).Click();
        Driver.FindElement(By.CssSelector(".default-input")).SendKeys("sdoekfoeke");
        Driver.FindElement(By.CssSelector(".row > .slot")).Click();
        {
            var element = Driver.FindElement(By.CssSelector(".row > .slot"));
            Actions builder = new Actions(Driver);
            builder.MoveToElement(element).Perform();
        }
        Driver.FindElement(By.CssSelector(".empty-results")).Click();
        Assert.Equal("Мы не нашли то, что вы искали",
            Driver.FindElement(By.CssSelector(".empty-results > .title")).Text);
        Driver.FindElement(By.CssSelector(".info")).Click();
        Driver.Close();
    }

    [Fact]
    public void SortingWorksCorrectly()
    {
        Driver.Navigate().GoToUrl("https://kazanexpress.ru/");
        Driver.Manage().Window.Size = new System.Drawing.Size(1289, 730);
        Driver.FindElement(By.CssSelector(".default-input")).Click();
        Driver.FindElement(By.CssSelector(".default-input")).SendKeys("носки");
        Driver.FindElement(By.CssSelector(".magnifying-glass:nth-child(1)")).Click();
        Driver.FindElement(By.CssSelector(".noselect:nth-child(2) > .noselect")).Click();
        Driver.FindElement(By.CssSelector(".noselect:nth-child(4)")).Click();

        Thread.Sleep(TimeSpan.FromSeconds(5));
        IReadOnlyCollection<IWebElement> elements = Driver.FindElements(By.ClassName("orders"));
        Assert.True(elements.First().Text.Contains("5.0"));
        Driver.Close();
    }

    [Fact]
    public void FilteringWorksCorrectly()
    {
        Driver.Navigate().GoToUrl("https://kazanexpress.ru/");
        Driver.Manage().Window.Size = new System.Drawing.Size(1288, 730);

        Thread.Sleep(TimeSpan.FromSeconds(3));
        Driver.FindElement(By.CssSelector(".default-input")).Click();
        Driver.FindElement(By.CssSelector(".default-input")).SendKeys("носки");
        Driver.FindElement(By.CssSelector(".default-input")).SendKeys(Keys.Enter);
        
        Thread.Sleep(TimeSpan.FromSeconds(3));
        Driver.FindElement(By.LinkText("Мужская одежда")).Click();
        
        Thread.Sleep(TimeSpan.FromSeconds(3));
        Driver.FindElement(
            By.CssSelector(".filter-options__parameter:nth-child(1) > .is-circle > .filter-checkbox--label")).Click();

        Thread.Sleep(TimeSpan.FromSeconds(3));
        var inputMinPrice = Driver.FindElement(By.CssSelector("input[data-test-id='input__min-price']"));
        inputMinPrice.Click();  
        inputMinPrice.Clear();
        inputMinPrice.SendKeys("200");
        inputMinPrice.SendKeys(Keys.Enter);
        
        Thread.Sleep(TimeSpan.FromSeconds(3));
        IReadOnlyCollection<IWebElement> elements = Driver.FindElements(By.ClassName("product-card-main-info-wrapper"));
        var xx = elements
            .Select(x => x.Text)
            .Select(x => x.Replace(" ", ""))
            .ToArray();
            var yy = xx
            .Select(x => x.Substring(0, x.IndexOf("₽", StringComparison.Ordinal)))
                .ToArray();
            var prices = yy
                .Select(double.Parse)
            .ToArray();
        Assert.All(prices.Take(10), i =>
        {
            if (i < 200)
            {
                throw new Exception();
            }
        });
        Driver.Close();
    }
}